<?xml version="1.0" encoding="UTF-8"?>
<Commands>
	<Command name="JavaScript" pauseBefore="false" promptUser="false" label="PDF注释导出LPtxt-250330" tooltip="点击运行后，将PDF注释导出一个LP格式的txt文本，需要用户选择保存的位置。" ID="ba7bef76493c4a4aa0d312f4e63c51c">
		<Items>
			<Item name="ScriptCode" type="text" value="// 自定义函数，用于左侧填充零&#xD;&#xA;function padWithZeros(num, totalLength) {&#xD;&#xA;    var str = String(num); // 转换为字符串&#xD;&#xA;    while (str.length &lt; totalLength) {&#xD;&#xA;        str = &apos;0&apos; + str; // 在左侧添加零&#xD;&#xA;    }&#xD;&#xA;    return str; // 返回填充后的字符串&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 定义函数以将矩形坐标转换为百分比&#xD;&#xA;function rectToPercentage(rect, pageWidth, pageHeight) {&#xD;&#xA;    return [&#xD;&#xA;        rect[0] / pageWidth,  // x0&#xD;&#xA;        (pageHeight - rect[3]) / pageHeight,  // y0&#xD;&#xA;    ];&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// 将富文本内容转换为纯文本，并用【】括号表示加粗的文字&#xD;&#xA;function convertRichTextToPlainText(richText) {&#xD;&#xA;    if (!Array.isArray(richText)) return &quot;&quot;;&#xD;&#xA;&#xD;&#xA;    var plainText = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;    // 遍历 richText 数组中的每个 span&#xD;&#xA;    for (var i = 0; i &lt; richText.length; i++) {&#xD;&#xA;        var span = richText[i];&#xD;&#xA;        var text = span.text || &quot;&quot;; // 获取文本内容&#xD;&#xA;&#xD;&#xA;        // 检查是否加粗,一般400以上为加粗&#xD;&#xA;        if (span.fontWeight&gt;400) {&#xD;&#xA;            text = &quot;【&quot; + text + &quot;】&quot;; // 用【】括号包裹加粗的文字&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        plainText += text; // 拼接到最终的纯文本中&#xD;&#xA;    }&#xD;&#xA;    return plainText;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 提取注释的主要函数&#xD;&#xA;function extractAnnotations() {&#xD;&#xA;    var annotations = [];&#xD;&#xA;    var totalPages = this.numPages; // 获取PDF的总页数&#xD;&#xA;&#xD;&#xA;    for (var pageNum = 0; pageNum &lt; totalPages; pageNum++) {&#xD;&#xA;        var pageAnnotations = extractPageAnnotations(pageNum);&#xD;&#xA;        annotations = annotations.concat(pageAnnotations);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    annotations = sortAnnotations(annotations);&#xD;&#xA;    assignAnnotationIndices(annotations);&#xD;&#xA;&#xD;&#xA;    return annotations;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 提取单页注释&#xD;&#xA;function extractPageAnnotations(pageNum) {&#xD;&#xA;    var annotations = [];&#xD;&#xA;    var annots = this.getAnnots(pageNum); // 获取当前页的注释&#xD;&#xA;&#xD;&#xA;    if (annots) {&#xD;&#xA;        var pageBox = this.getPageBox(&quot;Crop&quot;, pageNum); // 获取裁切框（左、下、右、上）的坐标&#xD;&#xA;        var pageWidth = pageBox[2] - pageBox[0]; // 计算页面宽度&#xD;&#xA;        var pageHeight = pageBox[1] - pageBox[3]; // 计算页面高度&#xD;&#xA;&#xD;&#xA;        for (var i = 0; i &lt; annots.length; i++) {&#xD;&#xA;            var annot = annots[i];&#xD;&#xA;            annotations.push(processAnnotation(annot, pageNum, pageWidth, pageHeight));&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return annotations;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 处理单个注释&#xD;&#xA;function processAnnotation(annot, pageNum, pageWidth, pageHeight) {&#xD;&#xA;    var richContent = annot.richContents || annot.contents || &quot;&quot;; // 获取富文本内容或普通内容&#xD;&#xA;    var plainContent = convertRichTextToPlainText(richContent); // 转换为纯文本&#xD;&#xA;&#xD;&#xA;    return {&#xD;&#xA;        page: pageNum + 1, // 页码从1开始&#xD;&#xA;        type: annot.type, // 注释类型&#xD;&#xA;        content: plainContent, // 使用转换后的纯文本内容&#xD;&#xA;        coordinates_percentage: rectToPercentage(annot.rect, pageWidth, pageHeight), // 注释坐标百分比&#xD;&#xA;        creation_date: annot.creationDate || &quot;&quot; // 注释创建日期&#xD;&#xA;    };&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 对注释进行排序&#xD;&#xA;function sortAnnotations(annotations) {&#xD;&#xA;    return annotations.sort(function(a, b) {&#xD;&#xA;        return a.page - b.page || (a.creation_date &gt; b.creation_date ? 1 : -1);&#xD;&#xA;    });&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 为注释分配索引&#xD;&#xA;function assignAnnotationIndices(annotations) {&#xD;&#xA;    var currentPage = null;&#xD;&#xA;    var index = 1;&#xD;&#xA;&#xD;&#xA;    for (var j = 0; j &lt; annotations.length; j++) {&#xD;&#xA;        if (annotations[j].page !== currentPage) {&#xD;&#xA;            currentPage = annotations[j].page;&#xD;&#xA;            index = 1; // 重置索引为1&#xD;&#xA;        }&#xD;&#xA;        annotations[j].index = index; // 添加索引字段&#xD;&#xA;        index++;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 转换注释到output变量&#xD;&#xA;function convertListToLptxt(totalPages, annotations) {&#xD;&#xA;    // 初始化输出变量&#xD;&#xA;    var output = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;    // 写入文件头&#xD;&#xA;    output += &quot;1,0\n-\n框内\n框外\n-&quot;;&#xD;&#xA;&#xD;&#xA;    // 创建一个字典来存储每个页面的注释&#xD;&#xA;    var annotatedPages = {};&#xD;&#xA;&#xD;&#xA;    // 遍历所有注释，标记注释所在的页面&#xD;&#xA;    for (var i = 0; i &lt; annotations.length; i++) {&#xD;&#xA;        var annot = annotations[i];&#xD;&#xA;        var page = annot.page;&#xD;&#xA;        if (!annotatedPages[page]) {&#xD;&#xA;            annotatedPages[page] = [];&#xD;&#xA;        }&#xD;&#xA;        annotatedPages[page].push(annot);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 遍历所有页面&#xD;&#xA;    for (var pageNum = 1; pageNum &lt;= totalPages; pageNum++) {&#xD;&#xA;        // 页码头格式化&#xD;&#xA;        output += &quot;\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;[&quot; + padWithZeros(pageNum, 3) + &quot;.tif]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;; &#xD;&#xA;&#xD;&#xA;        // 检查该页面是否有注释&#xD;&#xA;        if (annotatedPages[pageNum]) {&#xD;&#xA;            // 输出该页面的所有注释&#xD;&#xA;            for (var j = 0; j &lt; annotatedPages[pageNum].length; j++) {&#xD;&#xA;                var annot = annotatedPages[pageNum][j];&#xD;&#xA;                var formattedData = formatData(annot);&#xD;&#xA;                output += formattedData;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 返回输出内容&#xD;&#xA;    return output;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 格式化输出数据&#xD;&#xA;function formatData(annot) {&#xD;&#xA;    return &quot;\n----------------[&quot; + annot.index + &quot;]----------------[&quot; + annot.coordinates_percentage[0] + &quot;,&quot; + annot.coordinates_percentage[1] + &quot;,1]\n&quot; + annot.content;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 定义函数以将输出导出为LPTXT&#xD;&#xA;function exportAnnotationsToLPTXT(output) {&#xD;&#xA;    // 创建一个新的空白 PDF 文档&#xD;&#xA;    var newDoc = app.newDoc(); // 创建新的文档&#xD;&#xA;&#xD;&#xA;    // 在新文档中添加一个文本框&#xD;&#xA;    var rect = [72, 72, 540, 780]; // 定义文本框的位置和大小（左、下、右、上）&#xD;&#xA;    var field = newDoc.addField(&quot;outputField&quot;, &quot;text&quot;, 0, rect);&#xD;&#xA;    field.textSize = 10; // 设置文本大小&#xD;&#xA;    field.multiline = true; // 允许多行文本&#xD;&#xA;    field.value = output; // 将内容写入文本框&#xD;&#xA;&#xD;&#xA;    // 保存新文档到用户文件夹&#xD;&#xA;    var tempFilePath = app.getPath(&quot;user&quot;) + &quot;/output.pdf&quot;; // 使用用户文件夹路径&#xD;&#xA;    newDoc.saveAs(tempFilePath); // 保存新文档&#xD;&#xA;&#xD;&#xA;    // 关闭新文档&#xD;&#xA;    newDoc.closeDoc(); // 使用 closeDoc() 方法关闭文档&#xD;&#xA;&#xD;&#xA;    // 使用 exportAsText 导出为文本文件&#xD;&#xA;    try {&#xD;&#xA;        var tempDoc = app.openDoc(tempFilePath); // 重新打开新文档&#xD;&#xA;        var txtFilePath = tempFilePath.replace(/\.pdf$/, &quot;.txt&quot;); // 确定导出文件的路径&#xD;&#xA;        tempDoc.exportAsText(txtFilePath); // 导出为 TXT 文件&#xD;&#xA;        app.alert(&quot;注释已成功导出为LP格式文本。&quot;, 3);&#xD;&#xA;        tempDoc.closeDoc(); // 关闭导出的文档&#xD;&#xA;    } catch (e) {&#xD;&#xA;        app.alert(&quot;导出失败：&quot; + e.message);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// 保存Markdown文件&#xD;&#xA;function saveMarkdownFile(markdownContent) {&#xD;&#xA;    // 创建一个新的空白 PDF 文档&#xD;&#xA;    var newDoc = app.newDoc(); // 创建新的文档&#xD;&#xA;&#xD;&#xA;    // 在新文档中添加一个文本框&#xD;&#xA;    var rect = [72, 72, 540, 780]; // 定义文本框的位置和大小（左、下、右、上）&#xD;&#xA;    var field = newDoc.addField(&quot;outputField&quot;, &quot;text&quot;, 0, rect);&#xD;&#xA;    field.textSize = 10; // 设置文本大小&#xD;&#xA;    field.multiline = true; // 允许多行文本&#xD;&#xA;    field.value = markdownContent; // 将内容写入文本框&#xD;&#xA;&#xD;&#xA;    // 保存新文档到用户文件夹&#xD;&#xA;    var tempFilePath = app.getPath(&quot;user&quot;) + &quot;/output.pdf&quot;; // 使用用户文件夹路径&#xD;&#xA;    newDoc.saveAs(tempFilePath); // 保存新文档&#xD;&#xA;&#xD;&#xA;    // 关闭新文档&#xD;&#xA;    newDoc.closeDoc(); // 使用 closeDoc() 方法关闭文档&#xD;&#xA;&#xD;&#xA;    // 使用 exportAsText 导出为文本文件&#xD;&#xA;    try {&#xD;&#xA;        var tempDoc = app.openDoc(tempFilePath); // 重新打开新文档&#xD;&#xA;        var txtFilePath = tempFilePath.replace(/\.pdf$/, &quot;.txt&quot;); // 确定导出文件的路径&#xD;&#xA;        tempDoc.exportAsText(txtFilePath); // 导出为 TXT 文件&#xD;&#xA;        app.alert(&quot;注释已成功导出为LP格式文本。&quot;, 3);&#xD;&#xA;        tempDoc.closeDoc(); // 关闭导出的文档&#xD;&#xA;    } catch (e) {&#xD;&#xA;        app.alert(&quot;导出失败：&quot; + e.message);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// 主函数开始&#xD;&#xA;var annotations = extractAnnotations(); // 提取注释&#xD;&#xA;var totalPages = this.numPages;// 获取总页数&#xD;&#xA;var output = convertListToLptxt(totalPages, annotations);&#xD;&#xA;// exportAnnotationsToLPTXT(output);&#xD;&#xA;saveMarkdownFile(output); // 保存为 Markdown 文件"/>
			<Item name="ScriptName" type="text" value=""/>
		</Items>
	</Command>
</Commands>
